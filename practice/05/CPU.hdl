// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

/*
instruction:
    [0..2] : j
        [0] : out > 0
        [1] : out == 0
        [2] : out < 0
    [3..5] : d
        [5] : A
        [4] : D
        [3] : M
    [6..11]: c
    [12]   : a
    [15]   : i 
*/


CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Not(in=instruction[15], out=aInst);
    Mux16(a=instruction, b=ALUOut, sel=instruction[15], out=AIn);
    
    // dest
    And(a=instruction[3], b=true, out=wM);
    And(a=wM, b=instruction[15], out=writeM);
    Or(a=aInst, b=instruction[5], out=writeA);
    And(a=instruction[4], b=instruction[15], out=writeD);
    
    DRegister(in=ALUOut, load=writeD, out=DOut);
    ARegister(in=AIn, load=writeA, out[0..14]=addressM, out=AOut);
    
    Mux16(a=AOut, b=inM, sel=instruction[12], out=AOrM);
    
    ALU(x=DOut, y=AOrM, 
        zx=instruction[11],
        nx=instruction[10],
        zy=instruction[9],
        ny=instruction[8],
        f=instruction[7],
        no=instruction[6],
        out=outM, out=ALUOut, zr=zr, ng=ng
        );
    
    // jmp
    Not(in=zr, out=notZr);
    Not(in=ng, out=notNg);
    And(a=notZr, b=notNg, out=lg);
    And(a=lg, b=instruction[0], out=jmp0);
    And(a=zr, b=instruction[1], out=jmp1);
    And(a=ng, b=instruction[2], out=jmp2);
    Or(a=jmp0, b=jmp1, out=jmp01);
    Or(a=jmp01, b=jmp2, out=jmp012);
    And(a=jmp012, b=instruction[15], out=jmp);
    
    PC(in=AOut, load=jmp, inc=true, reset=reset, out[0..14]=pc);
}